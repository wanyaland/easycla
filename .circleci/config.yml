# Copyright The Linux Foundation and each contributor to CommunityBridge.
# SPDX-License-Identifier: MIT
version: 2.1

environment:
  BASH_ENV: ~/.bashrc

jobs:
  # Builds
  buildBackend: &buildBackendAnchor
    docker:
      - image: circleci/python:3.7.4-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9c:fe:5c:73:07:32:4e:5f:01:13:01:a1:ea:6a:04:9d"
            - "47:b5:56:d6:bb:a2:c5:90:76:74:70:bf:60:8a:f4:cf"
      - run:
          name: Install Top Level Dependencies
          command: yarn install
      - run:
          name: Install awscli
          command: sudo apt-get install -y awscli
      - run:
          name: Setup Backend
          command: |
            cd cla-backend
            yarn install
            sudo pip install -r requirements.txt
      - run:
          name: lint
          command: |
            cd cla-backend
            # Lint will always pass for now - need to continue addressing lint issues
            pylint cla/*.py || true
      - run:
          name: test
          command: |
            cd cla-backend
            export GITHUB_OAUTH_TOKEN=${GITHUB_OAUTH_TOKEN}
            python3 -m unittest -v cla/test_*.py && pytest -vv cla/tests/unit/test_model.py
            pytest -vv cla/tests/unit/test_github.py

  buildBackendDev:
    <<: *buildBackendAnchor
    environment:
      STAGE: dev

  buildNightlyBackendDev:
    <<: *buildBackendAnchor
    environment:
      CI_NIGHTLY: true
      STAGE: dev

  buildBackendStaging:
    <<: *buildBackendAnchor
    environment:
      STAGE: staging

  buildBackendProd:
    <<: *buildBackendAnchor
    environment:
      STAGE: prod

  buildGoBackend: &buildGoBackendAnchor
    docker:
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/communitybridge/easycla/
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9c:fe:5c:73:07:32:4e:5f:01:13:01:a1:ea:6a:04:9d"
            - "47:b5:56:d6:bb:a2:c5:90:76:74:70:bf:60:8a:f4:cf"
      - run:
          name: Setup
          command: |
            cd cla-backend-go
            make setup_dev
      - run:
          name: Build Swagger
          command: |
            cd cla-backend-go
            make swagger
      - run:
          name: Validate Swagger
          command: |
            cd cla-backend-go
            make swagger-validate
      - run:
          name: Build
          command: |
            cd cla-backend-go
            make build-aws-lambda
      - run:
          name: Test
          command: |
            cd cla-backend-go
            make test
      - run:
          name: Lint
          command: |
            cd cla-backend-go
            make lint
      - run:
          name: Move Binary
          command: |
            mv cla-backend-go ~/cla-backend-go
      - persist_to_workspace:
          root: ~/
          paths:
            - cla-backend-go/backend_aws_lambda

  buildGoBackendDev:
    <<: *buildGoBackendAnchor
    environment:
      STAGE: dev

  buildNightlyGoBackendDev:
    <<: *buildGoBackendAnchor
    environment:
      CI_NIGHTLY: true
      STAGE: dev

  buildGoBackendStaging:
    <<: *buildGoBackendAnchor
    environment:
      STAGE: staging

  buildGoBackendProd:
    <<: *buildGoBackendAnchor
    environment:
      STAGE: prod

  # Deploys
  deployBackend: &deployBackendAnchor
    docker:
      - image: circleci/python:3.7.4-node
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9c:fe:5c:73:07:32:4e:5f:01:13:01:a1:ea:6a:04:9d"
            - "47:b5:56:d6:bb:a2:c5:90:76:74:70:bf:60:8a:f4:cf"
      - run:
          name: Install Top Level Dependencies
          command: yarn install
      - run:
          name: Setup AWS key
          command: |
            echo "export AWS_ACCESS_KEY_ID=${!AWS_ACCESS_KEY_ID_ENV_VAR}" >> ${BASH_ENV}
            echo "export AWS_SECRET_ACCESS_KEY=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" >> ${BASH_ENV}
      - run:
          name: Install AWS Profile
          command: |
            echo "Installing Profile '${AWS_PROFILE}'..."
            mkdir -p ~/.aws
            printf "[profile ${AWS_PROFILE}]\nregion=${AWS_REGION}\noutput=json" > ~/.aws/config
            printf "[${AWS_PROFILE}]\naws_access_key_id=${!AWS_ACCESS_KEY_ID_ENV_VAR}\naws_secret_access_key=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" > ~/.aws/credentials
            echo "export AWS_PROFILE=${AWS_PROFILE}" >> ${BASH_ENV}
      - run:
          name: Deploy
          command: |
            echo "Using AWS profile: ${AWS_PROFILE}"
            echo "Stage is: ${STAGE}"

            # --------------------------------------------------------------
            ## Debug to confirm the binary files were restored
            echo "Directory: ~/"
            ls -alF ~/
            echo "Directory: ~/cla-backend-go/"
            ls -alF ~/cla-backend-go/
            ## End Debug
            # --------------------------------------------------------------

            # Copy over the go backend binary to the common cla-backend folder (they share a single serverless.yml config)
            cp ~/cla-backend-go/backend_aws_lambda ~/project/cla-backend/

            echo "Directory: ~/project/cla-backend/"
            ls -alF ~/project/cla-backend/
            pushd ~/project/cla-backend
            yarn install

            if [[ ! -f serverless.yml ]]; then echo "Missing serverless.yml file. Exiting..."; exit 1; fi
            if [[ ! -f serverless-authorizer.yml ]]; then echo "Missing serverless-authorizer.yml file. Exiting..."; exit 1; fi
            yarn sls deploy --force --stage ${STAGE} --region us-east-1
      - run:
          name: Service Check
          command: |
            sudo apt-get install -y curl
            v2_url=''
            v3_url=''
            if [[ "${STAGE}" == "prod" ]]; then
              v2_url=https://api.lfcla.com/v2/health
              v3_url=https://api.lfcla.com/v3/ops/health
            else
              v2_url=https://api.${STAGE}.lfcla.com/v2/health
              v3_url=https://api.${STAGE}.lfcla.com/v3/ops/health
            fi

            echo "Validating v2 backend using endpoint: ${v2_url}"
            curl --fail -XGET ${v2_url}
            exit_code=$?
            if [[ ${exit_coe} -eq 0 ]]; then
              echo "Successful response from endpoint: ${v2_url}"
            else
              echo "Failed to get a successful response from endpoint: ${v2_url}"
              exit ${exit_code}
            fi

            echo "Validating v3 backend using endpoint: ${v3_url}"
            curl --fail -XGET ${v3_url}
            exit_code=$?
            if [[ ${exit_coe} -eq 0 ]]; then
              echo "Successful response from endpoint: ${v3_url}"
            else
              echo "Failed to get a successful response from endpoint: ${v3_url}"
              exit ${exit_code}
            fi

  deployBackendDev:
    <<: *deployBackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployNightlyBackendDev:
    <<: *deployBackendAnchor
    environment:
      CI_NIGHTLY: true
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployBackendStaging:
    <<: *deployBackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployBackendProd:
    <<: *deployBackendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  buildFrontend: &buildFrontendAnchor
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - run:
          name: Setup AWS key
          command: |
            echo "export AWS_ACCESS_KEY_ID=${!AWS_ACCESS_KEY_ID_ENV_VAR}" >> ${BASH_ENV}
            echo "export AWS_SECRET_ACCESS_KEY=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" >> ${BASH_ENV}
      - run:
          name: Install AWS Profile
          command: |
            echo "PROJECT_DIR=${PROJECT_DIR}"
            echo "Installing Profile '${AWS_PROFILE}'..."
            mkdir -p ~/.aws
            printf "[profile ${AWS_PROFILE}]\nregion=${AWS_REGION}\noutput=json" > ~/.aws/config
            printf "[${AWS_PROFILE}]\naws_access_key_id=${!AWS_ACCESS_KEY_ID_ENV_VAR}\naws_secret_access_key=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" > ~/.aws/credentials
            echo "export AWS_PROFILE=${AWS_PROFILE}" >> ${BASH_ENV}
      - run:
          name: Install Top Level Dependencies
          command: yarn install
      - run:
          name: Install UI Dependencies
          command: |
            pushd $PROJECT_DIR
            echo "Running yarn install in folder: `pwd`. This will run yarn install in several places - see output below."
            yarn install-frontend
            popd
      - run:
          name: Build UI Source
          command: |
            echo "Building src..."
            pushd $PROJECT_DIR/src
            echo "AWS_PROFILE=${AWS_PROFILE}"
            echo "AWS_REGION=${AWS_REGION}"
            ls ~/.aws
            cat ${BASH_ENV}
            yarn prebuild:${STAGE}
            yarn build
            popd
      - run:
          name: Build Edge Source
          command: |
            echo "Building edge..."
            pushd $PROJECT_DIR/edge
            yarn build
            popd

  # Build Project Management Console
  buildProjectConsoleDev:
    <<: *buildFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  # Build Corporate Console
  buildCorporateConsoleDev:
    <<: *buildFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  # Build Contributor Console
  buildContributorConsoleDev:
    <<: *buildFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployFrontend: &deployFrontendAnchor
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - run:
          name: Setup AWS key
          command: |
            echo "export AWS_ACCESS_KEY_ID=${!AWS_ACCESS_KEY_ID_ENV_VAR}" >> ${BASH_ENV}
            echo "export AWS_SECRET_ACCESS_KEY=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" >> ${BASH_ENV}
      - run:
          name: Install AWS Profile
          command: |
            echo "PROJECT_DIR=${PROJECT_DIR}"
            echo "Installing Profile '${AWS_PROFILE}'..."
            mkdir -p ~/.aws
            printf "[profile ${AWS_PROFILE}]\nregion=${AWS_REGION}\noutput=json" > ~/.aws/config
            printf "[${AWS_PROFILE}]\naws_access_key_id=${!AWS_ACCESS_KEY_ID_ENV_VAR}\naws_secret_access_key=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" > ~/.aws/credentials
            echo "export AWS_PROFILE=${AWS_PROFILE}" >> ${BASH_ENV}
      - run:
          name: Install Top Level Dependencies
          command: yarn install
      - run:
          name: Install UI Dependencies
          command: |
            pushd $PROJECT_DIR
            echo "Running yarn install in folder: `pwd`. This will run yarn install in several places - see output below."
            yarn install-frontend
            popd
      - run:
          name: Build UI Source
          command: |
            echo "Building src..."
            pushd $PROJECT_DIR/src
            echo "Current directory is: `pwd`"
            echo "Running pre-fetch config: `yarn prebuild:${STAGE}`..."
            yarn prebuild:${STAGE}
            echo "Running build: `yarn build`..."
            yarn build
            popd
      - run:
          name: Build Edge Source
          command: |
            echo "Building edge..."
            pushd $PROJECT_DIR/edge
            yarn build
            popd
      - run:
          name: Deploy
          command: |
            echo "Deploying $PROJECT_DIR..."
            pushd $PROJECT_DIR
            echo "Running: 'yarn deploy -s ${STAGE} -r ${AWS_REGION} -c' in folder: `pwd`"
            yarn deploy -s ${STAGE} -r ${AWS_REGION} -c
            popd

  # Project Management Console
  deployProjectManagementConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployNightlyProjectManagementConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      CI_NIGHTLY: true
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployProjectManagementConsoleStaging:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployProjectManagementConsoleProd:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-frontend-project-console
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  # Corporate Console
  deployCorporateConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployNightlyCorporateConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      CI_NIGHTLY: true
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployCorporateConsoleStaging:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployCorporateConsoleProd:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-frontend-corporate-console
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  # Contributor Console
  deployContributorConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployNightlyContributorConsoleDev:
    <<: *deployFrontendAnchor
    environment:
      CI_NIGHTLY: true
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployContributorConsoleStaging:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployContributorConsoleProd:
    <<: *deployFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-frontend-contributor-console
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  deployLandingFrontend: &deployLandingFrontendAnchor
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout
      - run:
          name: Setup AWS key
          command: |
            echo "export AWS_ACCESS_KEY_ID=${!AWS_ACCESS_KEY_ID_ENV_VAR}" >> ${BASH_ENV}
            echo "export AWS_SECRET_ACCESS_KEY=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" >> ${BASH_ENV}
      - run:
          name: Install AWS Profile
          command: |
            echo "PROJECT_DIR=${PROJECT_DIR}"
            echo "Installing Profile '${AWS_PROFILE}'..."
            mkdir -p ~/.aws
            printf "[profile ${AWS_PROFILE}]\nregion=${AWS_REGION}\noutput=json" > ~/.aws/config
            printf "[${AWS_PROFILE}]\naws_access_key_id=${!AWS_ACCESS_KEY_ID_ENV_VAR}\naws_secret_access_key=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}" > ~/.aws/credentials
            echo "export AWS_PROFILE=${AWS_PROFILE}" >> ${BASH_ENV}
      - run:
          name: Deploy
          command: |
            echo "Using AWS profile: ${AWS_PROFILE}"
            echo "Stage is: ${STAGE}"
            echo "PROJECT_DIR=${PROJECT_DIR}"

            echo "Installing serverless..."
            yarn install

            # Run the deploy scripts
            pushd ${PROJECT_DIR}
            echo "Current directory is: `pwd`"
            echo "Running pre-fetch config: `yarn prebuild:${STAGE}`..."
            yarn prebuild:${STAGE}
            echo "Running: 'yarn deploy -s ${STAGE} -r ${AWS_REGION} -c' in folder: `pwd`"
            yarn deploy -s ${STAGE} -r ${AWS_REGION} -c

          no_output_timeout: 1.5h

  # Landing Page
  deployLandingFrontendDev:
    <<: *deployLandingFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-next
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployNightlyLandingFrontendDev:
    <<: *deployLandingFrontendAnchor
    environment:
      CI_NIGHTLY: true
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: dev
      PROJECT_DIR: cla-next
      ROOT_DOMAIN: lfcla.dev.platform.linuxfoundation.org
      PRODUCT_DOMAIN: dev.lfcla.com

  deployLandingFrontendStaging:
    <<: *deployLandingFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: staging
      PROJECT_DIR: cla-next
      ROOT_DOMAIN: lfcla.staging.platform.linuxfoundation.org
      PRODUCT_DOMAIN: staging.lfcla.com

  deployLandingFrontendProd:
    <<: *deployLandingFrontendAnchor
    environment:
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      AWS_PROFILE: lf-cla
      AWS_REGION: us-east-1
      STAGE: prod
      PROJECT_DIR: cla-next
      ROOT_DOMAIN: lfcla.platform.linuxfoundation.org
      PRODUCT_DOMAIN: lfcla.com

  functionalTests: &functionalTests
    docker:
      - image: circleci/python:3.7.4-node
    steps:
      - checkout
      - run:
          name: setup
          command: |
            cd tests/rest
            sudo pip3 install -r requirements.freeze.txt
      - run:
          name: functional-tests
          halt_build_on_fail: false  # for now, we will pass all functional tests
          command: |
            echo "Running functional tests for stage: ${STAGE}"
            cd tests/rest
            #lfx-login -u ${AUTH_USERNAME} -p ${AUTH_PASSWORD}
            # Now ${AUTH_TOKEN} will be set which is used by tavern-cli configuration
            tavern-ci test_project_management_console.tavern.yaml --alluredir=allure_result_folder -v || true

  functionalTestsDev:
    <<: *functionalTests
    environment:
      AUTH_USERNAME: ''
      AUTH_PASSWORD: ''
      API_URL: 'https://api.dev.lfcla.com'
      STAGE: dev

workflows:
  version: 2.1
  # Cron builds
  nightly:
    triggers:
      - schedule:
          # All times are UTC - run at midnight PDT
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildNightlyBackendDev:
          filters:
            tags:
              only: /.*/
      - buildNightlyGoBackendDev:
          filters:
            tags:
              only: /.*/
      - deployNightlyBackendDev:
          requires:
            - buildNightlyBackendDev
            - buildNightlyGoBackendDev
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployNightlyProjectManagementConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployNightlyCorporateConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployNightlyContributorConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployNightlyLandingFrontendDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master

  build_and_deploy:
   jobs:
      - buildBackendDev:
          filters:
            tags:
              only: /.*/
      - buildGoBackendDev:
          filters:
            tags:
              only: /.*/
      - buildProjectConsoleDev:
          filters:
            tags:
              only: /.*/
      - buildCorporateConsoleDev:
          filters:
            tags:
              only: /.*/
      - buildContributorConsoleDev:
          filters:
            tags:
              only: /.*/
      # Deploy Dev
      - deployBackendDev:
          requires:
            - buildBackendDev
            - buildGoBackendDev
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployProjectManagementConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployCorporateConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployContributorConsoleDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - deployLandingFrontendDev:
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
      - functionalTestsDev:
          requires:
            - deployBackendDev
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master

      # Deploy Staging
      - buildBackendStaging:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - buildGoBackendStaging:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - approve_staging:
          type: approval
          requires:
            - buildBackendStaging
            - buildGoBackendStaging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployBackendStaging:
          requires:
            - approve_staging
            - buildBackendStaging
            - buildGoBackendStaging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployProjectManagementConsoleStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployCorporateConsoleStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployContributorConsoleStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployLandingFrontendStaging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/

      # Deploy Prod
      - buildBackendProd:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - buildGoBackendProd:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - approve_prod:
          type: approval
          requires:
            - buildBackendProd
            - buildGoBackendProd
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployBackendProd:
          requires:
            - approve_prod
            - buildBackendProd
            - buildGoBackendProd
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployProjectManagementConsoleProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployCorporateConsoleProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployContributorConsoleProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
      - deployLandingFrontendProd:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
