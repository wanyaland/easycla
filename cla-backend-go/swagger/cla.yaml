# Copyright The Linux Foundation and each contributor to CommunityBridge.
# SPDX-License-Identifier: MIT
swagger: '2.0'
info:
  title: CLA API
  version: '1.0'
basePath: /v3
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'
    tokenUrl: 'https://www.googleapis.com/oauth2/v4/token'
    scopes:
      admin: LF Admin scope
      project: Project Manager scope
      company: CLA Manager scope
      contrib: Contributor scope
tags:
  - name: services

paths:
  /ops/version:
    get:
      summary: API Version Information
      security: []
      operationId: getVersion
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/version'
      tags:
        - version

  /ops/health:
    get:
      summary: API Health Check
      security: []
      operationId: healthCheck
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/health'
        '503':
          description: ''
          schema:
            $ref: '#/definitions/health'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - health

  /api-docs:
    get:
      security: []
      summary: Get swagger documentation
      operationId: getDoc
      produces:
        - text/html
      responses:
        200:
          description: Success
      tags:
        - docs

  /swagger.json:
    get:
      security: []
      summary: Get swagger JSON
      operationId: getSwagger
      produces:
        - application/json
      responses:
        200:
          description: Success
      tags:
        - docs

  /users/search:
    get:
      summary: Search users
      description: Searches for matching users by field
      security:
        - OauthSecurity:
            - user
      operationId: searchUsers
      parameters:
        - $ref: '#/parameters/searchTerm'
        - $ref: '#/parameters/searchField'
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/fullMatch'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/users'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - users

  /users/{userID}:
    get:
      summary: Get user by ID
      description: Returns a user for the provided user ID
      security:
        - OauthSecurity:
            - user
      operationId: getUser
      parameters:
        - $ref: "#/parameters/path-userID"
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - users
    delete:
      summary: Delete user by ID
      description: Deletes a user when provided the user ID
      security:
        - OauthSecurity:
            - user
      operationId: deleteUser
      parameters:
        - name: userID
          description: the user ID
          in: path
          type: string
          required: true
      responses:
        '204':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - users

  /users:
    post:
      summary: Add user
      description: Creates a new user record
      security:
        - OauthSecurity:
            - user
      operationId: addUser
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
      tags:
        - users
    put:
      summary: Update user
      description: Updates a new user record
      security:
        - OauthSecurity:
            - user
      operationId: updateUser
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/user-update'
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - users

  /users/username/{userName}:
    get:
      summary: Get user by User Name
      description: Returns a user for the provided user name
      security:
        - OauthSecurity:
            - user
      operationId: getUserByUserName
      parameters:
        - name: userName
          description: the user name value
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - users

  /signatures/id/{signatureID}:
    get:
      summary: Get the signature by ID
      description: Returns the signature when provided the signature ID
      security:
        - OauthSecurity:
            - user
      operationId: getSignature
      parameters:
        - $ref: "#/parameters/path-signatureID"
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signature'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - signatures

  /signatures/project/{projectID}:
    get:
      summary: Get project signatures
      description: Returns a list of project signature models when provided the project ID
      security:
        - OauthSecurity: []
      operationId: getProjectSignatures
      parameters:
        - $ref: "#/parameters/path-projectID"
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/searchTerm'
        - $ref: '#/parameters/searchField'
        - $ref: '#/parameters/fullMatch'
        - $ref: '#/parameters/signatureType'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signatures'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures

  /signatures/project/{projectID}/company/{companyID}:
    get:
      summary: Get project company signatures
      description: Returns a list of project signature models when provided the project ID and company ID
      security: []
      operationId: getProjectCompanySignatures
      parameters:
        - $ref: "#/parameters/path-projectID"
        - $ref: "#/parameters/path-companyID"
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/nextKey'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signatures'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures

  /signatures/company/{companyID}:
    get:
      summary: Get company signatures
      description: Returns a list of company signatures when provided the company ID
      security:
        - OauthSecurity: []
      operationId: getCompanySignatures
      parameters:
        - $ref: '#/parameters/path-companyID'
        - $ref: '#/parameters/signatureType'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/companyName'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signatures'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures

  /signatures/user/{userID}:
    get:
      summary: Get user signatures
      description: Returns a list of user signatures when provided the user ID
      security:
        - OauthSecurity: []
      operationId: getUserSignatures
      parameters:
        - $ref: "#/parameters/path-userID"
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/userName'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signatures'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures

  /signatures/project/{projectID}/company/{companyID}/employee:
    get:
      summary: Get project company signatures for the employees
      description: Returns a list of employee project signature models when provided the project ID and company ID
      security:
        - OauthSecurity: []
      operationId: getProjectCompanyEmployeeSignatures
      parameters:
        - $ref: "#/parameters/path-projectID"
        - $ref: "#/parameters/path-companyID"
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/nextKey'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signatures'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures

  /signatures/project/{projectID}/company/{companyID}/clagroup/{claGroupID}/approval-list:
    put:
      summary: Updates the Project / Organization/Company Approval list
      description: API to update the project and organization/company approval list.
      security:
        - OauthSecurity:
            - user
      operationId: updateApprovalList
      parameters:
        - $ref: "#/parameters/path-projectID"
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-claGroupID"
        - name: body
          in: body
          schema:
            $ref: '#/definitions/approval-list'
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signature'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
        '500':
          $ref: '#/responses/internal-server-error'
      tags:
        - signatures

  /signatures/{signatureID}/gh-org-whitelist:
    get:
      summary: Signature Update
      security:
        - OauthSecurity: []
      operationId: getGitHubOrgWhitelist
      parameters:
        - name: signatureID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/github-org'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures
    delete:
      summary: Signature Update
      security:
        - OauthSecurity: []
      operationId: deleteGitHubOrgWhitelist
      parameters:
        - name: signatureID
          in: path
          type: string
          required: true
        - name: body
          in: body
          schema:
            $ref: '#/definitions/gh-org-whitelist'
      responses:
        '204':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/github-org'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures
    post:
      summary: Signature Update
      security:
        - OauthSecurity: []
      operationId: addGitHubOrgWhitelist
      parameters:
        - name: signatureID
          in: path
          type: string
          required: true
        - name: body
          in: body
          schema:
            $ref: '#/definitions/gh-org-whitelist'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/github-org'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - signatures

  # Project Service
  /project:
    post:
      summary: Create a Project/CLA Group
      security:
        - OauthSecurity: []
      operationId: createProject
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/project'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/project'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
      tags:
        - project
    put:
      summary: Update Project by ID
      security:
        - OauthSecurity: []
      operationId: updateProject
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/project'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/project'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - project
    get:
      summary: Get Projects
      security:
        - OauthSecurity: []
      operationId: getProjects
      parameters:
        - $ref: '#/parameters/searchTerm'
        - $ref: '#/parameters/searchField'
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/fullMatch'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/projects'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - project

  /project/{projectID}:
    parameters:
      - name: projectID
        in: path
        type: string
        required: true
    get:
      summary: Get Project by ID
      security:
        - OauthSecurity: []
      operationId: getProjectById
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/project'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - project
    delete:
      summary: Delete Project by ID
      security:
        - OauthSecurity: []
      operationId: deleteProjectById
      responses:
        '204':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - project

  /project/external/{projectSFID}:
    get:
      summary: Get CLA Groups/Projects By External ID
      description: Returns a list of CLA groups associated with the specified external ID
      parameters:
        - $ref: "#/parameters/path-projectSFID"
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/pageSize'
      security:
        - OauthSecurity: []
      operationId: getProjectsByExternalID
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/projects'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - project

  /project/name/{projectName}:
    get:
      summary: Get Project By Name
      description: Returns the project object when provided the project name - exact match
      parameters:
        - name: projectName
          in: path
          type: string
          required: true
      security:
        - OauthSecurity: []
      operationId: getProjectByName
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/project'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - project

  # Company Service
  /company:
    get:
      summary: Get all companies
      description: Returns a list of companies
      security:
        - OauthSecurity:
            - company
      operationId: getCompanies
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/companies'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}:
    get:
      summary: Get company
      description: Returns the company by ID
      security:
        - OauthSecurity:
            - company
      operationId: getCompany
      parameters:
        - $ref: "#/parameters/path-companyID"
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/company'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/external/{companySFID}:
    get:
      summary: Get company
      description: Returns the company by external ID
      security: []
      operationId: getCompanyByExternalID
      parameters:
        - name: companySFID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/company'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/user/{userID}:
    get:
      summary: API to retrieve a list of companies where the user is the manager
      security:
        - OauthSecurity:
            - company
      operationId: getCompaniesByUserManager
      parameters:
        - $ref: "#/parameters/path-userID"
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/companies'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/user/{userID}/invites:
    get:
      summary: API to retrieve a list of companies where the user is the manager (approved) and in the invite list
      security:
        - OauthSecurity:
            - company
      operationId: getCompaniesByUserManagerWithInvites
      parameters:
        - $ref: "#/parameters/path-userID"
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/companies-with-invites'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/search:
    get:
      summary: Search companies
      description: Searches for matching companies by name
      security:
        - OauthSecurity:
            - company
      operationId: searchCompany
      parameters:
        - name: companyName
          in: query
          type: string
          required: true
        - name: nextKey
          description: The next key to scan - used as a page offset for scanning batches of records
          in: query
          type: string
          required: false
          # UUID v4 regex
          pattern: '[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/companies'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /organization/search:
    get:
      summary: Search companies from organization service
      description: Searches for matching organization by name
      security: []
      operationId: searchOrganization
      parameters:
        - name: companyName
          in: query
          type: string
          required: true
          pattern: '^([\w\p{L}][\w\s\p{L}()\[\]+\-/%!@#$]*){2,255}$'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/org-list'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '500':
          $ref: '#/responses/internal-server-error'
      tags:
        - organization

  /company/{companyID}/cla/invitelist:
    get:
      summary: API to retrieve pending invite requests
      security:
        - OauthSecurity:
            - company
      operationId: getCompanyInviteRequests
      parameters:
        - $ref: "#/parameters/path-companyID"
        - name: status
          in: query
          type: string
          required: false
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/company-invite-user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - company

  /company/{companyID}/{userID}/invitelist:
    get:
      summary: API to retrieve pending invite requests
      security:
        - OauthSecurity:
            - company
      operationId: getCompanyUserInviteRequests
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-userID"
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/company-invite-user'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}/cla/accesslist:
    post:
      summary: Add user to the company access list
      security:
        - OauthSecurity:
            - company
      operationId: addUsertoCompanyAccessList
      parameters:
        - $ref: "#/parameters/path-companyID"
        - name: user
          in: body
          schema:
            $ref: '#/definitions/access-list-user'
      responses:
        '200':
          description: 'Success'
          schema:
            type: object
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - company

  /company/{companyID}/cla/accesslist/request:
    put:
      summary: Request access to the Company
      security:
        - OauthSecurity:
            - company
      operationId: requestCompanyAccessRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - name: user
          in: body
          schema:
            $ref: '#/definitions/access-list-user'
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - company

  /company/{companyID}/cla/accesslist/{requestID}/approve:
    put:
      summary: Approve the Company Access List Request
      security:
        - OauthSecurity:
            - company
      operationId: approveCompanyAccessRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - company

  /company/{companyID}/cla/accesslist/{requestID}/reject:
    put:
      summary: Rejects the Company Access List Request
      security:
        - OauthSecurity:
            - company
      operationId: rejectCompanyAccessRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - company


  /company/{companyID}/ccla-whitelist-requests/{projectID}:
    get:
      summary: get ccla whitelist requests for given company and project
      security:
        - OauthSecurity:
            - user
      operationId: listCclaWhitelistRequestsByCompanyAndProject
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: status
          in: query
          type: string
          required: false
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/ccla-whitelist-request-list'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company
    post:
      summary: create ccla Approval request for given project
      security: []
      operationId: addCclaWhitelistRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/ccla-whitelist-request-input'
          required: true
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}/ccla-whitelist-requests/{projectID}/user/{userID}:
    get:
      summary: get ccla whitelist requests for given company, project, user
      security:
        - OauthSecurity:
            - user
      operationId: listCclaWhitelistRequestsByCompanyAndProjectAndUser
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - $ref: "#/parameters/path-userID"
        - name: status
          in: query
          type: string
          required: false
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/ccla-whitelist-request-list'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}/ccla-whitelist-requests/{projectID}/{requestID}/approve:
    put:
      summary: Approve CCLA whitelist request
      security:
        - OauthSecurity:
            - company
      operationId: approveCclaWhitelistRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}/ccla-whitelist-requests/{projectID}/{requestID}/reject:
    put:
      summary: Reject CCLA whitelist request
      security:
        - OauthSecurity:
            - company
      operationId: rejectCclaWhitelistRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}/ccla-whitelist-requests:
    get:
      summary: get ccla whitelist requests for given company
      security:
        - OauthSecurity:
            - user
      operationId: listCclaWhitelistRequests
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/projectID"
        - name: status
          in: query
          type: string
          required: false
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/ccla-whitelist-request-list'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - company

  /company/{companyID}/project/{projectID}/cla-manager:
    post:
      summary: Adds a new CLA Manager to the specified Company and Project
      description: Allows an existing CLA Manager to add another CLA Manager to the specified Company and Project.
      security:
        - OauthSecurity:
            - user
      operationId: addCLAManager
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: body
          in: body
          schema:
            $ref: '#/definitions/cla-manager-user'
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signature'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
      tags:
        - cla-manager

  /company/{companyID}/project/{projectID}/cla-manager/{userLFID}:
    delete:
      summary: Removes the CLA Manager from ACL for specified Company and Project
      description: Allows an existing CLA Manager to remove another CLA Manager from the specified Company and Project.
      security:
        - OauthSecurity:
            - user
      operationId: deleteCLAManager
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: userLFID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/signature'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
      tags:
        - cla-manager

  /company/{companyID}/project/{projectID}/cla-manager/requests:
    get:
      summary: Returns the CLA Manager requests list for the specified Company and Project
      security:
        - OauthSecurity:
            - user
      operationId: getCLAManagerRequests
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: status
          in: query
          type: string
          required: false
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/cla-manager-request-list'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - cla-manager
    post:
      summary: Creates a new CLA Manager request for the specified Company and Project
      security:
        - OauthSecurity:
            - user
      operationId: createCLAManagerRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: body
          in: body
          schema:
            $ref: '#/definitions/cla-manager-user'
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/cla-manager-request'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
      tags:
        - cla-manager

  /company/{companyID}/project/{projectID}/cla-manager/requests/{requestID}:
    get:
      summary: Returns the CLA Manager request for the specified Company, Project and Request ID
      security:
        - OauthSecurity:
            - user
      operationId: getCLAManagerRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/cla-manager-request'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - cla-manager
    delete:
      summary: Deletes the CLA Manager request for the specified Company, Project and Request ID
      security:
        - OauthSecurity:
            - user
      operationId: deleteCLAManagerRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '204':
          description: 'Resource Updated Successfully'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - cla-manager

  /company/{companyID}/project/{projectID}/cla-manager/requests/{requestID}/approve:
    put:
      summary: Approves the CLA Manager request for the specified Company and Project
      security:
        - OauthSecurity:
            - user
      operationId: approveCLAManagerRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/cla-manager-request'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
      tags:
        - cla-manager

  /company/{companyID}/project/{projectID}/cla-manager/requests/{requestID}/deny:
    put:
      summary: Denies/Rejects the CLA Manager request for the specified Company and Project
      security:
        - OauthSecurity:
            - user
      operationId: denyCLAManagerRequest
      parameters:
        - $ref: "#/parameters/path-companyID"
        - $ref: "#/parameters/path-projectID"
        - name: requestID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/cla-manager-request'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - cla-manager

  /template:
    get:
      summary: Get Available Templates
      security:
        - OauthSecurity: []
      operationId: getTemplates
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/template'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - template

  /clagroup/{claGroupId}/template:
    parameters:
      - name: claGroupId
        in: path
        type: string
        required: true
    post:
      summary: Create contract template for CLA Group
      security:
        - OauthSecurity: []
      operationId: createCLAGroupTemplate
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/create-cla-group-template'
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/template-pdfs'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - template

  /github/login:
    get:
      summary: API to redirect to Github Auth flow
      security: []
      operationId: login
      parameters:
        - name: callback
          in: query
          type: string
          required: true
      responses:
        302:
          description: '302 response'
          headers:
            Location:
              type: 'string'
      tags:
        - github

  /github/redirect:
    get:
      summary: API that Github redirects to after successful auth
      security: []
      operationId: redirect
      parameters:
        - name: code
          in: query
          type: string
          required: true
        - name: state
          in: query
          type: string
          required: true
      responses:
        302:
          description: '302 response'
          headers:
            Location:
              type: 'string'
      tags:
        - github

  /github/org/{orgName}/exists:
    get:
      summary: API to fetch the GitHub Oranization Details
      security:
        - OauthSecurity: []
      operationId: getOrg
      parameters:
        - name: orgName
          in: path
          type: string
          required: true
      responses:
        200:
          description: 'Success'
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
        404:
          $ref: '#/responses/not-found'
      tags:
        - github

  /project/{projectSFID}/github/organizations:
    post:
      summary: API to add new gitHub oranization in the project
      security:
        - OauthSecurity: []
      operationId: addProjectGithubOrganization
      parameters:
        - $ref: "#/parameters/path-projectSFID"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/create-github-organization'
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/github-organization'
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
      tags:
        - github-organizations
    get:
      summary: API to fetch the gitHub oranizations of the project
      security:
        - OauthSecurity: []
      operationId: getProjectGithubOrganizations
      parameters:
        - $ref: "#/parameters/path-projectSFID"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/github-organizations'
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
      tags:
        - github-organizations
  /project/{projectSFID}/github/organizations/{orgName}:
    delete:
      summary: API to delete gitHub oranization in the project
      security:
        - OauthSecurity: []
      operationId: deleteProjectGithubOrganization
      parameters:
        - $ref: "#/parameters/path-projectSFID"
        - name: orgName
          in: path
          type: string
          required: true
      responses:
        200:
          description: Success
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
      tags:
        - github-organizations

  /project/{projectSFID}/github/repositories:
    post:
      summary: API to add the gitHub repository
      security:
        - OauthSecurity:
            - project
      operationId: addProjectGithubRepository
      parameters:
        - $ref: "#/parameters/path-projectSFID"
        - in: body
          name: github-repository-input
          schema:
            $ref: '#/definitions/github-repository-input'
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/github-repository'
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
      tags:
        - github-repositories
    get:
      summary: API to fetch the gitHub repositories of the project
      security:
        - OauthSecurity:
            - project
      operationId: getProjectGithubRepositories
      parameters:
        - $ref: "#/parameters/path-projectSFID"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/list-github-repositories'
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
      tags:
        - github-repositories
  /project/{projectSFID}/github/repositories/{repositoryID}:
    delete:
      summary: API to add the gitHub repository
      security:
        - OauthSecurity:
            - project
      operationId: deleteProjectGithubRepository
      parameters:
        - $ref: "#/parameters/path-projectSFID"
        - name: repositoryID
          in: path
          type: string
          required: true
      responses:
        200:
          description: Success
        400:
          $ref: '#/responses/invalid-request'
        401:
          $ref: '#/responses/unauthorized'
        403:
          $ref: '#/responses/forbidden'
        404:
          $ref: '#/responses/not-found'
      tags:
        - github-repositories

  /events:
    get:
      summary: search events
      security:
        - OauthSecurity: []
      description: Returns list of events matching with search criteria
      operationId: searchEvents
      parameters:
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/nextKey'
        - $ref: '#/parameters/sortOrder'
        - $ref: '#/parameters/eventType'
        - $ref: '#/parameters/userID'
        - $ref: '#/parameters/companyID'
        - $ref: '#/parameters/projectID'
        - $ref: '#/parameters/before'
        - $ref: '#/parameters/after'
        - $ref: '#/parameters/userName'
        - $ref: '#/parameters/companyName'
        - $ref: '#/parameters/searchTerm'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/event-list'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/not-found'
      tags:
        - events

  /project/{projectID}/gerrits/{gerritID}:
    delete:
      summary: delete the gerrit
      description: Delete the gerrit
      security:
        - OauthSecurity:
            - project
      operationId: deleteGerrit
      parameters:
        - $ref: "#/parameters/path-projectID"
        - name: gerritID
          in: path
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - gerrits

  /project/{projectID}/gerrits:
    post:
      summary: add the gerrit
      description: add the gerrit
      security:
        - OauthSecurity:
            - project
      operationId: addGerrit
      parameters:
        - $ref: "#/parameters/path-projectID"
        - in: body
          name: add-gerrit-input
          schema:
            $ref: '#/definitions/add-gerrit-input'
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/gerrit'
        '400':
          $ref: '#/responses/invalid-request'
        '401':
          $ref: '#/responses/unauthorized'
        '403':
          $ref: '#/responses/forbidden'
      tags:
        - gerrits

# Common parameters
parameters:
  pageSize:
    name: pageSize
    description: The maximum number of results per page, value must be a positive integer value
    in: query
    type: integer
    required: false
    minimum: 0
    exclusiveMinimum: true
  companyName:
    name: companyName
    description: The optional company name filter
    in: query
    type: string
    required: false
    pattern: '^([\w\p{L}][\w\s\p{L}()\[\]+\-/%!@#$]*){2,255}$'
  userName:
    name: userName
    description: The optional user name filter
    in: query
    type: string
    required: false
    pattern: '^\w+$'
  searchField:
    name: searchField
    description: The optional user name filter
    in: query
    type: string
    required: false
    pattern: '^\w+$'
  searchTerm:
    name: searchTerm
    description: The optional search filter
    in: query
    type: string
    required: false
  fullMatch:
    name: fullMatch
    in: query
    type: boolean
    default: false
    required: false
  signatureType:
    name: signatureType
    in: query
    type: string
    required: false
    enum: [ccla,cla]
  nextKey:
    name: nextKey
    description: The next key to scan - used as a page offset for scanning batches of records
    in: query
    type: string
    required: false
    # UUID v4 regex
    # pattern: '[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}'
  sortOrder:
    name: sortOrder
    in: query
    description: Sort order
    type: string
    enum: [asc, desc]
  eventType:
    name: eventType
    description: Type of the event
    in: query
    type: string
  userID:
    name: userID
    description: unique id of the user
    in: query
    type: string
  projectID:
    name: projectID
    description: unique id of the project
    in: query
    type: string
  companyID:
    name: company_id
    description: unique id of the company
    in: query
    type: string
  path-userID:
    name: userID
    description: unique id of the user
    in: path
    type: string
    required: true
  path-projectID:
    name: projectID
    description: unique id of the project
    in: path
    type: string
    required: true
  path-projectSFID:
    name: projectSFID
    description: the external ID of the CLA Group/project
    in: path
    type: string
    required: true
  path-companyID:
    name: companyID
    description: unique id of the company
    in: path
    type: string
    required: true
  #path-companySFID:
  #  name: companySFID
  #  description: the external SalesForce ID of the Company/Organization
  #  in: path
  #  type: string
  #  required: true
  path-claGroupID:
    name: claGroupID
    description: the CLA Group ID
    in: path
    type: string
    required: true
  path-signatureID:
    name: signatureID
    description: unique id of the signature
    in: path
    type: string
    required: true
  before:
    name: before
    description: return result created before this time.
    in: query
    type: string
  after:
    name: after
    description: return result created after this time.
    in: query
    type: string

definitions:
  version:
    $ref: './common/version.yaml'

  user:
    $ref: './common/user.yaml'

  user-update:
    type: object
    title: User
    description: User update model
    properties:
      userID:
        type: string
      userExternalID:
        type: string
      username:
        type: string
      lfEmail:
        type: string
      lfUsername:
        type: string
      companyID:
        type: string
      githubID:
        type: string
      githubUsername:
        type: string
      admin:
        type: boolean
      note:
        type: string
      emails:
        type: array
        items:
          type: string

  users:
    type: object
    x-nullable: false
    title: Users
    description: A list of users
    properties:
      searchField:
        type: string
      searchTerm:
        type: string
      fullMatch:
        type: boolean
      resultCount:
        type: integer
        format: int64
        x-omitempty: false
      totalCount:
        type: integer
        format: int64
        x-omitempty: false
      lastKeyScanned:
        type: string
      users:
        type: array
        x-omitempty: false
        items:
          $ref: '#/definitions/user'


  gh-org-whitelist:
    $ref: './common/gh-org-whitelist.yaml'

  github-org:
    $ref: './common/github-org.yaml'

  company-invite-user:
    type: object
    x-nullable: false
    title: User
    description: User used for response from invitelist
    properties:
      userName:
        type: string
      inviteId:
        type: string
      userEmail:
        type: string
      userLFID:
        type: string
      status:
        type: string
      companyName:
        type: string
        pattern: '^([\w\p{L}][\w\s\p{L}()\[\]+\-/%!@#$]*){2,255}$'
        example: "Linux Foundation"

  access-list-user:
    type: object
    x-nullable: false
    title: User
    description: User used for request in company access list
    properties:
      inviteId:
        type: string
      userLFID:
        type: string

  cla-manager-request-list:
    type: object
    x-nullable: false
    title: CLA Manager Request List
    description: A list of CLA Manager requests for the specified company and project
    properties:
      requests:
        type: array
        x-omitempty: false
        items:
          $ref: '#/definitions/cla-manager-request'

  cla-manager-request:
    type: object
    x-nullable: false
    title: CLA Manager Request
    description: A CLA Manager request for the specified company and project
    properties:
      requestID:
        type: string
        description: The request ID
      companyID:
        type: string
        description: The company's ID
      companyExternalID:
        type: string
        description: The company's external ID
      companyName:
        type: string
        description: The company name
        pattern: '^([\w\p{L}][\w\s\p{L}()\[\]+\-/%!@#$]*){2,255}$'
        example: "Linux Foundation"
      projectID:
        type: string
        description: The project's ID
      projectExternalID:
        type: string
        description: The project's external ID
      projectName:
        type: string
        description: The project name
        example: CNCF
      userID:
        type: string
        description: The user's ID
      userExternalID:
        type: string
        description: The user's external ID
      userName:
        type: string
        description: The user's name
        example: 'Sally Morris'
      userEmail:
        type: string
        description: The user's email
        example: 'sally@us.ibm.com'
      status:
        type: string
        description: The request status - typically, one of pending, approved, denied
      created:
        type: string
        description: Date/time the record was created
      updated:
        type: string
        description: Date/time the record was last modified

  cla-manager-user:
    type: object
    x-nullable: false
    title: CLA Manager User
    description: User object used for CLA Manager requests
    properties:
      userName:
        type: string
      userEmail:
        type: string
      userLFID:
        type: string

  projects:
    $ref: './common/projects.yaml'

  project:
    $ref: './common/project.yaml'

  project-document:
    $ref: './common/project-document.yaml'

  create-cla-group-template:
    $ref: './common/create-cla-group-template.yaml'

  template-pdfs:
    $ref: './common/template-pdfs.yaml'

  companies:
    type: object
    x-nullable: false
    title: Companies
    description: A list of companies
    properties:
      searchTerms:
        type: string
      resultCount:
        type: integer
        format: int64
        x-omitempty: false
      totalCount:
        type: integer
        format: int64
        x-omitempty: false
      lastKeyScanned:
        type: string
      companies:
        type: array
        x-omitempty: false
        items:
          $ref: '#/definitions/company'

  companies-with-invites:
    type: object
    x-nullable: false
    title: Companies
    description: A list of companies with invitation status
    properties:
      resultCount:
        type: integer
        format: int64
        x-omitempty: false
      totalCount:
        type: integer
        format: int64
        x-omitempty: false
      lastKeyScanned:
        type: string
      companies-with-invites:
        type: array
        x-omitempty: false
        items:
          $ref: '#/definitions/company-with-invite'

  company:
    $ref: './common/company.yaml'

  company-with-invite:
    type: object
    x-nullable: false
    title: Company
    description: Company Model with Invitation status
    properties:
      companyID:
        description: The company unique ID
        example: 13f79a8f-734d-44c1-ab03-ab98c2a1b64a
        type: string
      companyExternalID:
        description: the company external ID
        type: string
      companyName:
        description: The company name
        type: string
        pattern: '^([\w\p{L}][\w\s\p{L}()\[\]+\-/%!@#$]*){2,255}$'
        example: "Linux Foundation"
      companyACL:
        type: array
        description: A list of user ID's authorized to make changes to the company
        items:
          type: string
      status:
        type: string
        description: The user's invitation status
      created:
        type: string
        description: The company record created date/time
        format: date-time
      updated:
        type: string
        description: The company record update date/time
        format: date-time

  signatures:
    $ref: './common/signatures.yaml'
  signature:
    $ref: './common/signature.yaml'
  approval-list:
    $ref: './common/signature-approval-list.yaml'

  ccla-whitelist-request-input:
    type: object
    x-nullable: false
    title: Ccla whitelist request input
    description: Ccla whitelist request input
    properties:
      contributorId:
        type: string
      contributorName:
        type: string
      contributorEmail:
        type: string
      recipientName:
        type: string
      recipientEmail:
        type: string
      message:
        type: string

  ccla-whitelist-request-list:
    type: object
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/ccla-whitelist-request'


  ccla-whitelist-request:
    type: object
    x-nullable: false
    title: Ccla whitelist request
    description: Ccla whitelist request
    properties:
      requestId:
        type: string
      requestStatus:
        type: string
      companyId:
        type: string
      companyName:
        type: string
        pattern: '^([\w\p{L}][\w\s\p{L}()\[\]+\-/%!@#$]*){2,255}$'
        example: "Linux Foundation"
      projectId:
        type: string
      projectName:
        type: string
      dateCreated:
        type: string
      dateModified:
        type: string
      version:
        type: string
      userId:
        type: string
      userName:
        type: string
      userEmails:
        type: array
        items:
          type: string
      userGithubUsername:
        type: string
      userGithubId:
        type: string
      userExternalId:
        type: string

  template:
    $ref: './common/template.yaml'

  meta-field:
    $ref: './common/meta-field.yaml'

  field:
    $ref: './common/field.yaml'

  error-response:
    type: object
    x-nullable: false
    title: Error Response
    description: Standard error format
    properties:
      Code:
        type: string
      Message:
        type: string

  #delete-response:
  #  type: object
  #  x-nullable: true
  #  title: Delete Response
  #  description: Response Message
  #  properties:
  #    Code:
  #      type: string
  #    Message:
  #      type: string

  health:
    $ref: './common/health.yaml'

  health-status:
    $ref: './common/health-status.yaml'

  event-list:
    $ref: './common/event-list.yaml'

  event:
    $ref: './common/event.yaml'

  github-repositories-group-by-orgs:
    $ref: './common/github-repositories-group-by-orgs.yaml'

  github-repository-input:
    $ref: './common/github-repository-input.yaml'

  github-repository:
    $ref: './common/github-repository.yaml'

  add-gerrit-input:
    $ref: './common/add-gerrit-input.yaml'

  gerrit:
    $ref: './common/gerrit.yaml'

  github-organizations:
    $ref: './common/github-organizations.yaml'

  create-github-organization:
    $ref: './common/create-github-organization.yaml'

  github-organization:
    $ref: './common/github-organization.yaml'

  github-repository-info:
    $ref: './common/github-repository-info.yaml'

  list-github-repositories:
    $ref: './common/list-github-repositories.yaml'

  org-list:
    $ref: './common/org-list.yaml'

  org:
    $ref: './common/org.yaml'

  icla-signatures:
    $ref: './common/icla-signatures.yaml'

  icla-signature:
    $ref: './common/icla-signature.yaml'

responses:
  #resource-deleted:
  #  description: Resource Deleted
  #  schema:
  #    $ref: '#/definitions/delete-response'
  unauthorized:
    description: 'The client is not authorized to to make this API call'
    schema:
      $ref: '#/definitions/error-response'
  invalid-request:
    description: 'The client has made an invalid request - usually this is due to missing or invalid parameters or body/payload'
    schema:
      $ref: '#/definitions/error-response'
  forbidden:
    description: Insufficient privilege to execute action.
    schema:
      $ref: '#/definitions/error-response'
  not-found:
    description: 'The requested resource was not found'
    schema:
      $ref: '#/definitions/error-response'
  internal-server-error:
    description: 'Internal server error'
    schema:
      $ref: '#/definitions/error-response'
  conflict:
    description: The request could not be completed due to a conflict with the current state of the target resource.
    schema:
      $ref: '#/definitions/error-response'
